// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Message from "../i18n/Message.bs.js";
import * as Grid$Mui from "rescript-material-ui/src/Grid.bs.js";
import * as ReactIntl from "react-intl";
import * as App_Context from "../App_Context.bs.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Contact_Map from "./Contact_Map.bs.js";
import * as Common_Style from "../common/Common_Style.bs.js";
import * as Common_Constants from "../common/Common_Constants.bs.js";
import * as Core from "@material-ui/core";
import * as Contact_AddressButton from "./Contact_AddressButton.bs.js";

function Contact_Page(Props) {
  var match = React.useState(function () {
        
      });
  var setMapUrl = match[1];
  var mapUrl = match[0];
  var intl = ReactIntl.useIntl();
  var commonClasses = Common_Style.useStyles();
  var match$1 = React.useContext(App_Context.Context.t);
  var dispatch = match$1[1];
  var activeMenuItem = match$1[0].activeMenuItem;
  React.useEffect((function () {
          if (activeMenuItem !== /* Contact */3) {
            Curry._1(dispatch, /* StoreActiveMenuItem */{
                  _0: /* Contact */3
                });
          }
          
        }), [activeMenuItem]);
  var tmp = {};
  if (mapUrl !== undefined) {
    tmp.url = Caml_option.valFromOption(mapUrl);
  }
  var tmp$1 = {};
  if (mapUrl !== undefined) {
    tmp$1.url = Caml_option.valFromOption(mapUrl);
  }
  return React.createElement(Core.Grid, {
              children: null,
              container: true
            }, React.createElement(Core.Grid, {
                  children: React.createElement(Core.Grid, {
                        children: null,
                        className: commonClasses.paragraphGap,
                        container: true
                      }, React.createElement(Core.Grid, {
                            children: React.createElement(Core.Typography, {
                                  children: intl.formatMessage(Message.Contact.header),
                                  variant: "h4"
                                }),
                            item: true,
                            xs: Grid$Mui.Xs[12]
                          }), React.createElement(Core.Grid, {
                            children: React.createElement(Core.Typography, {
                                  children: intl.formatMessage(Message.Contact.openingTimes),
                                  className: commonClasses.bold
                                }),
                            item: true,
                            xs: Grid$Mui.Xs[12]
                          })),
                  item: true,
                  xs: Grid$Mui.Xs[12]
                }), React.createElement(Core.Grid, {
                  children: React.createElement(Core.Grid, {
                        children: null,
                        className: commonClasses.paragraphGap,
                        container: true
                      }, React.createElement(Core.Grid, {
                            children: React.createElement(Core.Grid, {
                                  children: null,
                                  container: true
                                }, React.createElement(Core.Grid, {
                                      children: React.createElement(Core.Typography, {
                                            children: intl.formatMessage(Message.Contact.companyName),
                                            className: commonClasses.bold
                                          }),
                                      item: true,
                                      xs: Grid$Mui.Xs[12]
                                    }), React.createElement(Core.Grid, {
                                      children: React.createElement(Core.Typography, {
                                            children: intl.formatMessage(Message.Contact.companyOwner)
                                          }),
                                      item: true,
                                      xs: Grid$Mui.Xs[12]
                                    }), React.createElement(Core.Grid, {
                                      children: React.createElement(Core.Typography, {
                                            children: intl.formatMessage(Message.Contact.companyEmail) + " " + Common_Constants.companyEmail
                                          }),
                                      item: true,
                                      xs: Grid$Mui.Xs[12]
                                    })),
                            item: true,
                            xs: Grid$Mui.Xs[12]
                          }), React.createElement(Core.Grid, {
                            children: React.createElement(Core.Grid, {
                                  children: null,
                                  container: true
                                }, React.createElement(Core.Grid, {
                                      children: React.createElement(Core.Typography, {
                                            children: intl.formatMessage(Message.Contact.infoContactHeader),
                                            className: commonClasses.bold
                                          }),
                                      item: true,
                                      xs: Grid$Mui.Xs[12]
                                    }), React.createElement(Core.Grid, {
                                      children: React.createElement(Core.Typography, {
                                            children: intl.formatMessage(Message.Contact.infoContactPhone) + " " + Common_Constants.infoPhone
                                          }),
                                      item: true,
                                      xs: Grid$Mui.Xs[12]
                                    }), React.createElement(Core.Grid, {
                                      children: React.createElement(Core.Typography, {
                                            children: intl.formatMessage(Message.Contact.infoContactEmail) + " " + Common_Constants.infoEmail
                                          }),
                                      item: true,
                                      xs: Grid$Mui.Xs[12]
                                    })),
                            item: true,
                            xs: Grid$Mui.Xs[12]
                          }), React.createElement(Core.Grid, {
                            children: React.createElement(Core.Grid, {
                                  children: null,
                                  container: true
                                }, React.createElement(Core.Grid, {
                                      children: React.createElement(Core.Typography, {
                                            children: intl.formatMessage(Message.Contact.registrationAddressHeader),
                                            className: commonClasses.bold
                                          }),
                                      item: true,
                                      xs: Grid$Mui.Xs[12]
                                    }), React.createElement(Core.Grid, {
                                      children: React.createElement(Contact_AddressButton.make, {
                                            label: Message.Contact.registrationAddress,
                                            onClick: (function (param) {
                                                Curry._1(setMapUrl, (function (param) {
                                                        return Common_Constants.registrationAddressMapUrl;
                                                      }));
                                              })
                                          }),
                                      item: true,
                                      xs: Grid$Mui.Xs[12]
                                    }), React.createElement(Core.Grid, {
                                      children: React.createElement(Core.Typography, {
                                            children: intl.formatMessage(Message.Contact.registrationAddressConnection)
                                          }),
                                      item: true,
                                      xs: Grid$Mui.Xs[12]
                                    }), React.createElement(Core.Grid, {
                                      children: React.createElement(Core.Typography, {
                                            children: intl.formatMessage(Message.Contact.registrationAddressParkingLabel)
                                          }),
                                      item: true,
                                      xs: Grid$Mui.Xs[12]
                                    }), React.createElement(Core.Grid, {
                                      children: React.createElement(Core.Typography, {
                                            children: intl.formatMessage(Message.Contact.registrationAddressParking)
                                          }),
                                      item: true,
                                      xs: Grid$Mui.Xs[12]
                                    }), React.createElement(Core.Grid, {
                                      children: React.createElement(Contact_AddressButton.make, {
                                            label: Message.Contact.registrationAddressPaidParking1,
                                            onClick: (function (param) {
                                                Curry._1(setMapUrl, (function (param) {
                                                        return Common_Constants.registrationAddressPaidParking1;
                                                      }));
                                              })
                                          }),
                                      item: true,
                                      xs: Grid$Mui.Xs[12]
                                    }), React.createElement(Core.Grid, {
                                      children: React.createElement(Contact_AddressButton.make, {
                                            label: Message.Contact.registrationAddressPaidParking2,
                                            onClick: (function (param) {
                                                Curry._1(setMapUrl, (function (param) {
                                                        return Common_Constants.registrationAddressPaidParking2;
                                                      }));
                                              })
                                          }),
                                      item: true,
                                      xs: Grid$Mui.Xs[12]
                                    })),
                            item: true,
                            xs: Grid$Mui.Xs[12]
                          }), React.createElement(Core.Grid, {
                            children: React.createElement(Core.Grid, {
                                  children: null,
                                  container: true
                                }, React.createElement(Core.Grid, {
                                      children: React.createElement(Core.Typography, {
                                            children: intl.formatMessage(Message.Contact.facturationAddressLabel),
                                            className: commonClasses.bold
                                          }),
                                      item: true,
                                      xs: Grid$Mui.Xs[12]
                                    }), React.createElement(Core.Grid, {
                                      children: React.createElement(Contact_AddressButton.make, {
                                            label: Message.Contact.facturationAddress,
                                            onClick: (function (param) {
                                                Curry._1(setMapUrl, (function (param) {
                                                        return Common_Constants.facturationAddress;
                                                      }));
                                              })
                                          }),
                                      item: true,
                                      xs: Grid$Mui.Xs[12]
                                    })),
                            item: true,
                            xs: Grid$Mui.Xs[12]
                          }), React.createElement(Core.Grid, {
                            children: React.createElement(Core.Grid, {
                                  children: React.createElement(Core.Grid, {
                                        children: React.createElement(Core.Typography, {
                                              children: intl.formatMessage(Message.Contact.idNumber)
                                            }),
                                        item: true,
                                        xs: Grid$Mui.Xs[12]
                                      }),
                                  container: true
                                }),
                            item: true,
                            xs: Grid$Mui.Xs[12]
                          })),
                  className: commonClasses.headerGap,
                  item: true,
                  md: Grid$Mui.Md[6],
                  xs: Grid$Mui.Xs[12]
                }), React.createElement(Core.Hidden, {
                  children: React.createElement(Core.Grid, {
                        children: React.createElement(Contact_Map.make, tmp),
                        className: commonClasses.headerGap,
                        item: true,
                        md: Grid$Mui.Md[6]
                      }),
                  mdUp: Belt_Option.isNone(mapUrl),
                  smDown: true
                }), React.createElement(Core.Hidden, {
                  children: React.createElement(Core.Dialog, {
                        children: React.createElement(Contact_Map.make, tmp$1),
                        fullWidth: true,
                        onClose: (function (param, param$1) {
                            Curry._1(setMapUrl, (function (param) {
                                    
                                  }));
                          }),
                        open: Belt_Option.isSome(mapUrl)
                      }),
                  mdUp: true
                }));
}

var make = Contact_Page;

export {
  make ,
}
/* react Not a pure module */
